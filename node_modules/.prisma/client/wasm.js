
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  phoneNumber: 'phoneNumber',
  email: 'email',
  preferredContact: 'preferredContact',
  sendInvoiceAutomatically: 'sendInvoiceAutomatically',
  defaultRate: 'defaultRate',
  confirmed: 'confirmed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  startTime: 'startTime',
  endTime: 'endTime',
  format: 'format',
  status: 'status',
  isCompleted: 'isCompleted',
  isRecurring: 'isRecurring',
  recurringType: 'recurringType',
  recurringEndDate: 'recurringEndDate',
  recurrentId: 'recurrentId',
  confirmed: 'confirmed',
  hostJwt: 'hostJwt',
  clientJwt: 'clientJwt',
  hostAttended: 'hostAttended',
  clientAttended: 'clientAttended',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailScheduleScalarFieldEnum = {
  id: 'id',
  appointmentId: 'appointmentId',
  emailType: 'emailType',
  scheduledFor: 'scheduledFor',
  status: 'status',
  recipientEmail: 'recipientEmail',
  recipientName: 'recipientName',
  subject: 'subject',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sentAt: 'sentAt',
  errorMessage: 'errorMessage'
};

exports.Prisma.NoteScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  appointmentId: 'appointmentId',
  title: 'title',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  fileName: 'fileName',
  fileUrl: 'fileUrl',
  uploadedAt: 'uploadedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  appointmentId: 'appointmentId',
  amount: 'amount',
  status: 'status',
  paymentMethod: 'paymentMethod',
  description: 'description',
  dueDate: 'dueDate',
  paidAt: 'paidAt',
  emailSent: 'emailSent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WeeklyAvailabilityScalarFieldEnum = {
  id: 'id',
  weekday: 'weekday',
  startTime: 'startTime',
  endTime: 'endTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DateAvailabilityScalarFieldEnum = {
  id: 'id',
  date: 'date',
  startTime: 'startTime',
  endTime: 'endTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.ContactMethod = exports.$Enums.ContactMethod = {
  PHONE: 'PHONE',
  EMAIL: 'EMAIL',
  SMS: 'SMS',
  WHATSAPP: 'WHATSAPP'
};

exports.AppointmentFormat = exports.$Enums.AppointmentFormat = {
  ONLINE: 'ONLINE',
  FACE_TO_FACE: 'FACE_TO_FACE'
};

exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  NOT_YET_ATTENDED: 'NOT_YET_ATTENDED',
  ATTENDED: 'ATTENDED',
  ABSENT: 'ABSENT',
  CANCELLED: 'CANCELLED'
};

exports.RecurringType = exports.$Enums.RecurringType = {
  WEEKLY: 'WEEKLY',
  BIWEEKLY: 'BIWEEKLY',
  MONTHLY: 'MONTHLY'
};

exports.EmailType = exports.$Enums.EmailType = {
  CONFIRMATION: 'CONFIRMATION',
  REMINDER_24H: 'REMINDER_24H',
  REMINDER_1H: 'REMINDER_1H',
  INVOICE_DELIVERY: 'INVOICE_DELIVERY'
};

exports.EmailStatus = exports.$Enums.EmailStatus = {
  PENDING: 'PENDING',
  SENT: 'SENT',
  CANCELLED: 'CANCELLED',
  FAILED: 'FAILED'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  UNPAID: 'UNPAID',
  PAID: 'PAID',
  OVERDUE: 'OVERDUE'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  CARD: 'CARD',
  BANK_TRANSFER: 'BANK_TRANSFER',
  CHECK: 'CHECK',
  OTHER: 'OTHER'
};

exports.Prisma.ModelName = {
  Client: 'Client',
  Appointment: 'Appointment',
  EmailSchedule: 'EmailSchedule',
  Note: 'Note',
  Document: 'Document',
  Invoice: 'Invoice',
  WeeklyAvailability: 'WeeklyAvailability',
  DateAvailability: 'DateAvailability'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/mohamed/Desktop/work/next/psychologist_website/node_modules/@prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/mohamed/Desktop/work/next/psychologist_website/packages/prisma/schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../packages/prisma/.env"
  },
  "relativePath": "../../../packages/prisma",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// schema.prisma\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\" // or sqlite, mysql, etc.\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Client {\n  id                       String        @id @default(cuid())\n  firstName                String\n  lastName                 String\n  phoneNumber              String\n  email                    String        @unique\n  preferredContact         ContactMethod\n  sendInvoiceAutomatically Boolean       @default(true)\n  defaultRate              Int           @default(300)\n  confirmed                Boolean       @default(false) // For approval system\n  appointments             Appointment[]\n  notes                    Note[]\n  documents                Document[]\n  invoices                 Invoice[]\n  createdAt                DateTime      @default(now())\n  updatedAt                DateTime      @updatedAt\n}\n\nmodel Appointment {\n  id               String             @id @default(cuid())\n  clientId         String\n  client           Client             @relation(fields: [clientId], references: [id])\n  startTime        DateTime\n  endTime          DateTime\n  format           AppointmentFormat\n  status           AppointmentStatus? @default(NOT_YET_ATTENDED)\n  isCompleted      Boolean            @default(false)\n  isRecurring      Boolean            @default(false)\n  recurringType    RecurringType?\n  recurringEndDate DateTime?\n  recurrentId      String?\n  confirmed        Boolean            @default(false) // For approval system\n  // Jitsi meeting fields (only for online appointments)\n  hostJwt          String? // JWT token for the host\n  clientJwt        String? // JWT token for the client\n  hostAttended     Boolean? // Whether the host attended the meeting\n  clientAttended   Boolean? // Whether the client attended the meeting\n  notes            Note[]\n  emailSchedules   EmailSchedule[]\n  invoice          Invoice? // One-to-one relationship with invoice\n  createdAt        DateTime           @default(now())\n  updatedAt        DateTime           @updatedAt\n}\n\nmodel EmailSchedule {\n  id            String      @id @default(cuid())\n  appointmentId String\n  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)\n\n  emailType    EmailType\n  scheduledFor DateTime\n  status       EmailStatus @default(PENDING)\n\n  // Email content\n  recipientEmail String\n  recipientName  String\n  subject        String\n\n  // Metadata\n  createdAt    DateTime  @default(now())\n  updatedAt    DateTime  @updatedAt\n  sentAt       DateTime?\n  errorMessage String?\n\n  @@index([scheduledFor])\n  @@index([status])\n  @@index([appointmentId])\n}\n\nmodel Note {\n  id            String       @id @default(cuid())\n  clientId      String? // optional link to a client\n  appointmentId String? // optional link to a session\n  client        Client?      @relation(fields: [clientId], references: [id])\n  appointment   Appointment? @relation(fields: [appointmentId], references: [id])\n  title         String\n  content       Json // Lexical content\n  createdAt     DateTime     @default(now())\n  updatedAt     DateTime     @updatedAt\n}\n\nmodel Document {\n  id         String   @id @default(cuid())\n  clientId   String\n  client     Client   @relation(fields: [clientId], references: [id])\n  fileName   String\n  fileUrl    String // URL to the uploaded PDF (e.g., S3 or local)\n  uploadedAt DateTime @default(now())\n}\n\nmodel Invoice {\n  id            String         @id @default(cuid())\n  clientId      String\n  client        Client         @relation(fields: [clientId], references: [id])\n  appointmentId String?        @unique // Optional, one-to-one with appointment\n  appointment   Appointment?   @relation(fields: [appointmentId], references: [id])\n  amount        Decimal        @db.Decimal(10, 2)\n  status        InvoiceStatus  @default(UNPAID)\n  paymentMethod PaymentMethod?\n  description   String? // Optional description\n  dueDate       DateTime? // Optional due date\n  paidAt        DateTime? // When it was paid\n  emailSent     Boolean        @default(false) // Whether invoice has been sent by email\n  createdAt     DateTime       @default(now())\n  updatedAt     DateTime       @updatedAt\n\n  @@index([clientId])\n  @@index([appointmentId])\n  @@index([dueDate])\n}\n\nenum ContactMethod {\n  PHONE\n  EMAIL\n  SMS\n  WHATSAPP\n}\n\nenum AppointmentFormat {\n  ONLINE\n  FACE_TO_FACE\n}\n\nenum AppointmentStatus {\n  NOT_YET_ATTENDED // Future appointments\n  ATTENDED // Completed and attended\n  ABSENT // Completed but client didn't show up\n  CANCELLED // Cancelled appointment\n}\n\nenum RecurringType {\n  WEEKLY\n  BIWEEKLY\n  MONTHLY\n}\n\nenum EmailType {\n  CONFIRMATION\n  REMINDER_24H\n  REMINDER_1H\n  INVOICE_DELIVERY\n}\n\nenum EmailStatus {\n  PENDING\n  SENT\n  CANCELLED\n  FAILED\n}\n\nenum InvoiceStatus {\n  UNPAID\n  PAID\n  OVERDUE\n}\n\nenum PaymentMethod {\n  CASH\n  CARD\n  BANK_TRANSFER\n  CHECK\n  OTHER\n}\n\n// Weekly recurring availability template\nmodel WeeklyAvailability {\n  id        String   @id @default(cuid())\n  weekday   Int // 0=Monday, 1=Tuesday, ..., 6=Sunday\n  startTime String // \"09:00\" (HH:mm format)\n  endTime   String // \"17:00\" (HH:mm format)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@unique([weekday, startTime, endTime])\n  @@index([weekday])\n}\n\n// Specific date overrides (overrides weekly template for specific dates)\nmodel DateAvailability {\n  id        String   @id @default(cuid())\n  date      DateTime // Specific date (time set to 00:00:00)\n  startTime String? // \"09:00\" - null means closed all day\n  endTime   String? // \"17:00\" - null means closed all day\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@unique([date, startTime, endTime])\n  @@index([date])\n}\n",
  "inlineSchemaHash": "bb779a8769a7ad675890d7c9d9d420f52c28d13405786fbfccb7503614b9dfdc",
  "copyEngine": false
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Client\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phoneNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"preferredContact\",\"kind\":\"enum\",\"type\":\"ContactMethod\"},{\"name\":\"sendInvoiceAutomatically\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"defaultRate\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"confirmed\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"appointments\",\"kind\":\"object\",\"type\":\"Appointment\",\"relationName\":\"AppointmentToClient\"},{\"name\":\"notes\",\"kind\":\"object\",\"type\":\"Note\",\"relationName\":\"ClientToNote\"},{\"name\":\"documents\",\"kind\":\"object\",\"type\":\"Document\",\"relationName\":\"ClientToDocument\"},{\"name\":\"invoices\",\"kind\":\"object\",\"type\":\"Invoice\",\"relationName\":\"ClientToInvoice\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Appointment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clientId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"client\",\"kind\":\"object\",\"type\":\"Client\",\"relationName\":\"AppointmentToClient\"},{\"name\":\"startTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"format\",\"kind\":\"enum\",\"type\":\"AppointmentFormat\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"AppointmentStatus\"},{\"name\":\"isCompleted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isRecurring\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"recurringType\",\"kind\":\"enum\",\"type\":\"RecurringType\"},{\"name\":\"recurringEndDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"recurrentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"confirmed\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"hostJwt\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clientJwt\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hostAttended\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"clientAttended\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"notes\",\"kind\":\"object\",\"type\":\"Note\",\"relationName\":\"AppointmentToNote\"},{\"name\":\"emailSchedules\",\"kind\":\"object\",\"type\":\"EmailSchedule\",\"relationName\":\"AppointmentToEmailSchedule\"},{\"name\":\"invoice\",\"kind\":\"object\",\"type\":\"Invoice\",\"relationName\":\"AppointmentToInvoice\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"EmailSchedule\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"appointmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"appointment\",\"kind\":\"object\",\"type\":\"Appointment\",\"relationName\":\"AppointmentToEmailSchedule\"},{\"name\":\"emailType\",\"kind\":\"enum\",\"type\":\"EmailType\"},{\"name\":\"scheduledFor\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"EmailStatus\"},{\"name\":\"recipientEmail\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"recipientName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subject\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"sentAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"errorMessage\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Note\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clientId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"appointmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"client\",\"kind\":\"object\",\"type\":\"Client\",\"relationName\":\"ClientToNote\"},{\"name\":\"appointment\",\"kind\":\"object\",\"type\":\"Appointment\",\"relationName\":\"AppointmentToNote\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Document\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clientId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"client\",\"kind\":\"object\",\"type\":\"Client\",\"relationName\":\"ClientToDocument\"},{\"name\":\"fileName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fileUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"uploadedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Invoice\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clientId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"client\",\"kind\":\"object\",\"type\":\"Client\",\"relationName\":\"ClientToInvoice\"},{\"name\":\"appointmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"appointment\",\"kind\":\"object\",\"type\":\"Appointment\",\"relationName\":\"AppointmentToInvoice\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"InvoiceStatus\"},{\"name\":\"paymentMethod\",\"kind\":\"enum\",\"type\":\"PaymentMethod\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dueDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"paidAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"emailSent\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"WeeklyAvailability\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"weekday\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"startTime\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"endTime\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"DateAvailability\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"startTime\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"endTime\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = undefined
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

