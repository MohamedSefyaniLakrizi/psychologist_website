import { NextResponse } from "next/server";
import { Resend } from "resend";
import { z } from "zod";

const resend = new Resend(process.env.RESEND_API_KEY);

// Email templates
const EMAIL_TEMPLATES = {
  confirmation: {
    subject: "‚úÖ Confirmation de votre rendez-vous",
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <h2 style="color: #2563eb;">‚úÖ Votre rendez-vous est confirm√©</h2>
        
        <p>Bonjour <strong>{{firstName}} {{lastName}}</strong>,</p>
        
        <p>Nous avons le plaisir de confirmer votre rendez-vous :</p>
        
        <div style="background-color: #f3f4f6; padding: 15px; border-radius: 8px; margin: 20px 0;">
          <h3 style="margin-top: 0; color: #374151;">üìÖ D√©tails du rendez-vous</h3>
          <ul style="list-style: none; padding: 0;">
            <li><strong>Date :</strong> {{date}}</li>
            <li><strong>Heure :</strong> {{time}}</li>
            <li><strong>Type :</strong> Consultation en cabinet</li>
          </ul>
        </div>
        
        <p>üìç <strong>Adresse du cabinet :</strong><br>
        [Votre adresse ici]<br>
        [Ville, Code postal]</p>
        
        <p>üìû En cas d'impr√©vu, n'h√©sitez pas √† nous contacter au [votre num√©ro].</p>
        
        <p>Nous nous r√©jouissons de vous rencontrer.</p>
        
        <p>Cordialement,<br>
        <strong>[Votre nom]</strong></p>
      </div>
    `,
  },

  reschedule: {
    subject: "üìÖ Reprogrammation de votre rendez-vous",
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <h2 style="color: #f59e0b;">üìÖ Reprogrammation de votre rendez-vous</h2>
        
        <p>Bonjour <strong>{{firstName}} {{lastName}}</strong>,</p>
        
        <p>Nous vous contactons concernant votre rendez-vous initialement pr√©vu le <strong>{{originalDate}}</strong> √† <strong>{{originalTime}}</strong>.</p>
        
        <p>En raison d'un impr√©vu, nous devons reprogrammer votre rendez-vous. Nous vous proposons les cr√©neaux suivants :</p>
        
        <div style="background-color: #fef3c7; padding: 15px; border-radius: 8px; margin: 20px 0;">
          <h3 style="margin-top: 0; color: #92400e;">üóìÔ∏è Nouveaux cr√©neaux disponibles</h3>
          <ul>
            <li>[Date 1] √† [Heure 1]</li>
            <li>[Date 2] √† [Heure 2]</li>
            <li>[Date 3] √† [Heure 3]</li>
          </ul>
        </div>
        
        <p>Merci de nous confirmer votre disponibilit√© en r√©pondant √† ce message ou en nous appelant au [votre num√©ro].</p>
        
        <p>Nous nous excusons pour ce d√©sagr√©ment et vous remercions de votre compr√©hension.</p>
        
        <p>Cordialement,<br>
        <strong>[Votre nom]</strong></p>
      </div>
    `,
  },

  reminder: {
    subject: "üîî Rappel de votre rendez-vous",
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <h2 style="color: #059669;">üîî Rappel de votre rendez-vous</h2>
        
        <p>Bonjour <strong>{{firstName}} {{lastName}}</strong>,</p>
        
        <p>Nous vous rappelons que vous avez un rendez-vous :</p>
        
        <div style="background-color: #ecfdf5; padding: 15px; border-radius: 8px; margin: 20px 0;">
          <h3 style="margin-top: 0; color: #065f46;">üìÖ Votre rendez-vous</h3>
          <ul style="list-style: none; padding: 0;">
            <li><strong>Date :</strong> {{date}}</li>
            <li><strong>Heure :</strong> {{time}}</li>
            <li><strong>Adresse :</strong> [Votre adresse]</li>
          </ul>
        </div>
        
        <p>üìã <strong>Pr√©paration :</strong></p>
        <ul>
          <li>Veuillez arriver 10 minutes avant l'heure pr√©vue</li>
          <li>Apportez une pi√®ce d'identit√©</li>
          <li>N'h√©sitez pas √† pr√©parer vos questions</li>
        </ul>
        
        <p>üìû En cas d'emp√™chement, merci de nous pr√©venir au moins 24h √† l'avance.</p>
        
        <p>√Ä bient√¥t !</p>
        
        <p>Cordialement,<br>
        <strong>[Votre nom]</strong></p>
      </div>
    `,
  },

  cancellation: {
    subject: "‚ùå Annulation de votre rendez-vous",
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <h2 style="color: #dc2626;">‚ùå Annulation de votre rendez-vous</h2>
        
        <p>Bonjour <strong>{{firstName}} {{lastName}}</strong>,</p>
        
        <p>Nous vous informons que votre rendez-vous du <strong>{{date}}</strong> √† <strong>{{time}}</strong> a √©t√© annul√©.</p>
        
        <div style="background-color: #fef2f2; padding: 15px; border-radius: 8px; margin: 20px 0;">
          <h3 style="margin-top: 0; color: #991b1b;">üìã D√©tails de l'annulation</h3>
          <p>Motif : [Pr√©ciser le motif si n√©cessaire]</p>
        </div>
        
        <p>Si vous souhaitez reprendre un nouveau rendez-vous, n'h√©sitez pas √† :</p>
        <ul>
          <li>üìû Nous appeler au [votre num√©ro]</li>
          <li>üìß R√©pondre √† ce message</li>
          <li>üåê Utiliser notre formulaire en ligne</li>
        </ul>
        
        <p>Nous nous excusons pour ce d√©sagr√©ment et restons √† votre disposition.</p>
        
        <p>Cordialement,<br>
        <strong>[Votre nom]</strong></p>
      </div>
    `,
  },
} as const;

// Validation schema
const templateEmailSchema = z.object({
  templateType: z.enum([
    "confirmation",
    "reschedule",
    "reminder",
    "cancellation",
  ]),
  clientEmail: z.string().email(),
  firstName: z.string().min(1),
  lastName: z.string().min(1),
  date: z.string(),
  time: z.string(),
  originalDate: z.string().optional(),
  originalTime: z.string().optional(),
});

export async function POST(request: Request) {
  try {
    const body = await request.json();

    // Validate the request body
    const validatedData = templateEmailSchema.parse(body);

    const {
      templateType,
      clientEmail,
      firstName,
      lastName,
      date,
      time,
      originalDate,
      originalTime,
    } = validatedData;

    // Get the selected template
    const template = EMAIL_TEMPLATES[templateType];

    // Format the date for better readability
    const formattedDate = new Date(date).toLocaleDateString("fr-FR", {
      weekday: "long",
      year: "numeric",
      month: "long",
      day: "numeric",
    });

    const formattedOriginalDate = originalDate
      ? new Date(originalDate).toLocaleDateString("fr-FR", {
          weekday: "long",
          year: "numeric",
          month: "long",
          day: "numeric",
        })
      : "";

    // Replace template variables
    const emailContent = template.html
      .replace(/{{firstName}}/g, firstName)
      .replace(/{{lastName}}/g, lastName)
      .replace(/{{date}}/g, formattedDate)
      .replace(/{{time}}/g, time)
      .replace(/{{originalDate}}/g, formattedOriginalDate)
      .replace(/{{originalTime}}/g, originalTime || "");

    // Send email using Resend
    const { data, error } = await resend.emails.send({
      from: "Cabinet M√©dical <onboarding@resend.dev>",
      to: [clientEmail],
      subject: template.subject,
      html: emailContent,
    });

    if (error) {
      console.error("Resend error:", error);
      return NextResponse.json(
        { error: "Erreur lors de l'envoi de l'email" },
        { status: 500 }
      );
    }

    return NextResponse.json(
      {
        message: "Email de template envoy√© avec succ√®s",
        emailId: data?.id,
        templateType,
      },
      { status: 200 }
    );
  } catch (error) {
    console.error("API error:", error);

    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: "Donn√©es invalides", details: error.issues },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { error: "Erreur interne du serveur" },
      { status: 500 }
    );
  }
}

// GET endpoint to retrieve available templates
export async function GET() {
  const templates = Object.keys(EMAIL_TEMPLATES).map((key) => ({
    id: key,
    name: getTemplateName(key as keyof typeof EMAIL_TEMPLATES),
    description: getTemplateDescription(key as keyof typeof EMAIL_TEMPLATES),
  }));

  return NextResponse.json({ templates });
}

function getTemplateName(templateType: keyof typeof EMAIL_TEMPLATES): string {
  const names = {
    confirmation: "Confirmation de rendez-vous",
    reschedule: "Reprogrammation",
    reminder: "Rappel de rendez-vous",
    cancellation: "Annulation",
  };
  return names[templateType];
}

function getTemplateDescription(
  templateType: keyof typeof EMAIL_TEMPLATES
): string {
  const descriptions = {
    confirmation:
      "Email de confirmation envoy√© apr√®s acceptation du rendez-vous",
    reschedule: "Email pour reprogrammer un rendez-vous existant",
    reminder: "Email de rappel envoy√© avant le rendez-vous",
    cancellation: "Email d'annulation d'un rendez-vous",
  };
  return descriptions[templateType];
}
